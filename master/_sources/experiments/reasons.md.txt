# Features, justifications and culprits

This goes over reasons why some stuff is done the way it's done

## Snippets

### Removed the index reference

````
```{toctree}
:caption: Experiments
:maxdepth: 1

experiments/graphviz
experiments/wavedrom
experiments/sandbox
experiments/reasons
```
````

### Cross referencing

Use single word without _ and -, or it will NOT make a anchor properly, then the cross reference will try to find and (and often scroll to wrong place).
Make it identical to its name doesn't work as it will make the original handle ID1 or so and still not match. However single word will work
```
(riscvtrapexception)=
# RISC-V Trap Exceptions




{ref}`RISC-V trap handling <riscvtrapexception>`

[RISC-V trap handling](riscvtrapexception)
```

or use the autogenerated labels

```
{ref}`RISC-V trap handling <risc-v-trap-exceptions>`

[RISC-V trap handling](risc-v-trap-exceptions)
```


### Common breadcrumbs

```
   {{ macros.breadcrumb_indent('"Project Properties" -> "C/C++ Build" -> "Settings" -> "Tool Settings" -> "GNU RISC-V Cross C/C++ Linker" -> "General" -> "Check \'-nostartfiles\'"', '   ') }}

   {{ macros.breadcrumb_indent('"Right click on <your_project> in the Project Explorer" -> "Properties"', '   ') }}

   {{ macros.breadcrumb_indent('"Project Properties" -> "C/C++ Build" -> "Settings" -> "Tool Settings" -> "GNU RISC-V Cross C/C++ Linker" -> "General" -> "Check \'-nostartfiles\'"', '   ') }}


   {{ macros.breadcrumb_indent('"Debug Configuration" -> "Debugger" -> "GDB Client Setup" -> "Commands"', '   ') }}

   {{ macros.breadcrumb_indent('"SoftConsole Menu toolbar" -> "Run" -> "Debug Configurations" -> "Launcher for \<YOUR_PROJECT\>"', '   ') }}


{{ macros.breadcrumb_square('"Debug Configuration" -> "Startup" -> "Initialization" ') }}
<br/>

{{ macros.breadcrumb_square('"Right click on \<YOUR_PROJECT\> in the Project Explorer" -> "Build Configurations" -> "Set Active" -> "select the required configuration/build target"') }}
<br/>

```


### Conditional includes

```
{% if windows is defined %}
{% include 'main/using_softconsole/post_installation/_windows.inc' %}
{% endif %}  % End of Windows
```

```

{% if windows is defined and linux is defined %}
## Windows
{% include 'main/using_softconsole/post_installation/_windows.inc' %}
## Linux
{% include 'main/using_softconsole/post_installation/_linux.inc' %}
{% else %}




{% if windows is defined %}
{% include 'main/using_softconsole/post_installation/_windows.inc' %}
{% endif %}  % End of Windows


{% if linux is defined %}
{% include 'main/using_softconsole/post_installation/_linux.inc' %}
{% endif %}  % End of Linux
```


## Cross referencing

The whole documents:

```
{doc}`/troubleshooting/renode`

{doc}`/troubleshooting/renode_networking`
```

While referencing anchors is not always reliable.

## Tabs

Content inside the tabs can't have headings (as that would have overlaying structure in parallel to the parent), that means no cross-referencing into a tab.

## Personalities

Currently the project in the ./source folder has multiple personalities (each with slightly different config/presentation), but eventually could be driven by one content, just included, presented themed differently.

 - **main** The main SC document, where most of the work, content should live.
 - **installer** Included installation related sections of the main document, which could be shown after installer finished installing SC.
 - **cppcheck**: My experiment to make better document for cppcheck warning exclusions.

## Use of jinja 

### Variables and substitutions

Config for the main document populates the jinja context with some variables, these are feed from `_json` folder, these are separated by their different roles:

- `baker_info.json` do not touch, it will be generated by SoftConsole baker.
- `common_substitutions.json` some commonly used variables/substitutions, shouldn't be updated often
- `common_variables.json` should be update by us on each big release, to make sure we are recommending the correct versions of related projects/submodules.
- `document_variant.json` shouldn't be changed, scripts which are generating Linux/Windows variants of the documents are updating these

## Things to avoid

It's better not to include any Unicode (or fancy characters, smileys, check box tick marks....). Be careful, copy pasting from the PDF might include some invisible unicode issues, slightly different dash '-', different white space ' '. Especially for code section which are expected to be copy/pasted, be in ascii and work reliably. It's better to be careful from what the content is copied and what formatting you .md in your editor has enabled.

Use as little as possible of HTML, if cannot be avoided I used the <br/> to break a new line in a table, but try to use any markup way of breaking the content (like double new line). This is breaking up the presentation/content separation and making harder for us later to switch from HTML medium (if we will even needed to do so).

## Known issues

### Simple tables can't contain URL links
Use CSV or list-tables.

- CSV has advantage of being editable from Excel, with VS code extension `Excel Viewer` it can show the preview. See `introduction/_support_table6.5.csv` as example of CSV and example how to include it `introduction/_support_table6.5.inc`. Disadvantage is that new lines is tricky (and often have to resort to `<br/>`, if possible use as little as possible of the HTML).

- list-tables. Can contain larger tables and bigger content without messing up the readability, placing new lines often (not always) resorts in the new line, if content will still fit into one line, it might still be placed into one line. Disadvantage it's different syntax and it needs getting used to. Example: `introduction/_used_packages/java.inc`

Both list-tables and CSV have advantage of the primitive MD tables that the URL links work, user can specify highlighting of headers and ratio of the columns.

All tables do not word-wrap, so for smaller tables without URLs it's ok to use any of 3. For bigger content the list-tables look as the best candidate, it's not editable from Excel but placing new lines usually breaks up the content without HTML tags.

### Automatic headers do not work
There was other underlying issue, but one was the structure, the automatic headers are fairly trivial, not working well with nesting. Structure like this:

- What is new
  - 6.6
    - Features
    - Bugs  
  - 6.5
    - Features
    - Bugs

Wouldn't be possible because there are duplicate labels, renaming the structure in a way that each section would be unique could render the headers and their nesting obsolete. What is the point of the 6.6 or 6.5 father if every single subsection will contain it:

- What is new
  - 6.6
    - 6.6 Features
    - 6.6 Bugs
  - 6.5
    - 6.5 Features
    - 6.5 Bugs

Or in some section (or some subsection) something will have Renode header (or sub-header) named more than once (across the whole document, for example Renode in the used packages, Renode in the user guide and Renode in the troubleshooting section).

So now the automatic headers are disabled (they looked like they could work on small documents with handful of headings), the duplicate header entries are ignored when building the document. And when cross reference is done, just one extra step has to be done. Make a landing anchor label, see _whatsnew6.5.inc where a custom label which makes sense to us can be used (instead of generated table from a header which might not make much sense out of the context and out of the context of the parent headers).


## Duplication of content

We find golem middle path between reusing material and referencing it to other sections. With current RN we were cross referencing a lot, which look like made people not read the references.

We could try this time instead of 'the table is the same as version xyz' have the table content duplicated by including it.

However too much of duplication might create own sets of problems, so we have to by trial/error find a healthy balance.

Importing documents can be done by different ways, there is sphinx bundled directive 'include'

<https://myst-parser.readthedocs.io/en/latest/sphinx/index.html>

it can be made to include restructured documents as well (and inside their re-structured syntax is expected).
Be vary:
 - about references (relative links, to images for example) and everything what could be broken if the current path would move
 - nested markup, for example if the included document contains level 3 heading, then it's good to import into into places where it matches correctly (something which already has level 1 and level 2). If the import is going to happen from parents which are at different levels, it's better to include the heading in the parent before the import and then imported file will have just the body without heading.
   - Dedicated headers in parent can remedy the warnings mentioned above with duplicate headers.
 - jinja scripts/variables/macros do not work, they will be copied as raw strings without being processed
 - just as my preference to the included files I give the name underscore prefix so the included content will not be grouped together with the parent content and gave it `.inc` extensions. And made config to ignore the .md files, technically it's possible to include the .md as well, but the Sphinx will be processing all the .md files and will complain about unreferenced content

My preference is to use the jinja a lot, and even if it's not used, it better to include it just in case it will be needed later. 

Changed to share static/json content moved some common content 1 directory up

However if any of the included documents

It's safer to run `make clean` before running a build when modifying heavily reused (included) content

## Highlighting lines

There is a feature to highlight specific lines in the code, however it expects plural, to highlight one line I had to select it twice `emphasize-lines: 3,3`

```{code-block} text
---
emphasize-lines: 3,3
---
1
2
3
4
5
6
```

## Tricks

<https://stackoverflow.com/questions/31048570/how-to-type-a-grave-accent-aka-backtick-96-in-markdown>
