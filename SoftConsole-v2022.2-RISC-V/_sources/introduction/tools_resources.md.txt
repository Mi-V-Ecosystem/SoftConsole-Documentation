```````{jinja} scvars
{% import '_jinja/macros.html' as macros %}

# Packages, Tools and Resources

{{macros.deprecated_documentation_check_and_message(doc_deprecated, doc_deprecated_url)}}


## Related Tools and Resources

### Libero SoC/Firmware Catalog

Use {{liberoSoc}} or later to create hardware designs and to export firmware drivers and example projects. The  {{firmwareCatalog}} can be used to generate firmware drivers and example projects for use in {{sc}}.

### Firmware drivers

#### Hardware Abstraction Layers

The following firmware cores (or later versions if available) must be used and can be generated from Libero SoC or from the Firmware Catalog.

  - {{ mpfsHal }}
  - {{ riscvHal }}

```{warning}
If earlier versions of these firmware cores are used then there will be problems compiling, linking, running and/or debugging the software.
```

#### Peripheral firmware drivers
Use Libero SoC or the Firmware Catalog to generate the latest available peripheral drivers for the target system.

#### Matching firmware to the target hardware

The firmware used in a SoftConsole project must match the target hardware. For SmartFusion and SmartFusion2 projects Libero SoC generates specific firmware files that must be used for the SoftConsole project to match and be compatible with the target hardware. 

The most convenient way to avoid mismatch problems is to ensure that Libero SoC is configured to use the appropriate firmware repositories and the Libero project is configured to use the latest versions of all firmware drivers (including CMSIS/HAL). Then export the firmware from Libero and import/copy the generated files into the SoftConsole project.

In some cases, the firmware project will define target specific details such as clock speeds, UART baud divisors etc. that must match the target hardware for proper functionality.

Refer to the Libero SoC and Firmware Catalog documentation for more information about the firmware flows supported by these tools.

```{warning}
 - Before importing/copying Libero SoC or Firmware Catalog generated firmware files into a SoftConsole project it is advisable to manually delete all CMSIS, hal, drivers, riscv_hal, pse_hal and drivers_config folders from the SoftConsole project leaving only the project specific custom source files.

 - For SmartFusion and SmartFusion2 projects the drivers_config folder must be generated/exported from Libero SoC and copied/imported into the SoftConsole project every time that the Libero project is modified to ensure that the SoftConsole project matches the target hardware.

 - SoftConsole v3.4 workspaces or projects generated by Libero SoC or the Firmware Catalog are not compatible with SoftConsole v5.1 or later and should not be used.

 - SoftConsole v5.1 RISC-V projects are not compatible with SoftConsole v5.2 or later and must be recreated using the same source files and equivalent project settings for use in SoftConsole v5.2 or later.
```

### FlashPro JTAG programmer

SoftConsole includes OpenOCD which uses a FlashPro JTAG programmer for debug access to the target platform/CPU.

The table below summarizes SoftConsole's support for FlashPro variants, OSs and target devices.

{% include 'main/introduction/_support_table2021.3.inc' %}

{% if windows is defined %}
On Windows the FlashPro3/4/5/6 programmers are supported, and the relevant drivers must be installed. 
{% endif %}  % End of Windows

{% if linux is defined %}
On Linux, the FlashPro5/6 programmers are supported and the post-install configuration steps must be carried out to allow access to the programmer by non-root users (see [Post Installation Steps](linuxpostinstallhw) section).
{% endif %}  % End of Linux


### Microchip GitHub repositories

 - [Mi-V Ecosystem](https://mi-v-ecosystem.github.io/)

 - PolarFire SoC
   - [PolarFire SoC Embedded Software](https://github.com/polarfire-soc) Collection of various repositories:
     - [Bare Metal drivers and SoftConsole examples](https://github.com/polarfire-soc/polarfire-soc-bare-metal-examples)
     - [Hart Software Services](https://github.com/polarfire-soc/hart-software-services)
     - [Documentation](https://github.com/polarfire-soc/polarfire-soc-documentation)
     - Linux repositories ([buildroot](https://github.com/polarfire-soc/polarfire-soc-buildroot-sdk) and [Yocto](https://github.com/polarfire-soc/meta-polarfire-soc-yocto-bsp))
     - [Icicle's Libero reference design](https://github.com/polarfire-soc/icicle-kit-reference-design)



 - Softcore RISC-V resources:
   - [RISCV on Microsemi FPGA](https://github.com/RISCV-on-Microsemi-FPGA) legacy Microsemi Mi-V ecosystem resource. 


```{note}
The bundled examples with {{ sc }} are tested and are working with {{ sc }} correctly, therefore are recommended as the primary reference before importing other projects.
```

```{important}
Import examples from the [Bare Metal drivers and SoftConsole examples GitHub](https://github.com/polarfire-soc/polarfire-soc-bare-metal-examples) to get most up to date examples and HAL.
```


### Other resources

Other useful Documentation:
 - [RISC-V specifications](https://riscv.org/technical/specifications/)
 - [Renode’s documentation](https://renode.readthedocs.io/en/latest/)
 - [Mi-V Renode webinar series](https://www.microsemi.com/product-directory/fpga-soc/5210-mi-v-embedded-ecosystem#renode-webinar-series)
 - Erich Styger’s [“MCU on Eclipse”](https://mcuoneclipse.com/) blog. Useful tips and tricks for using Eclipse/CDT, GNU ARM Eclipse, GNU Tools for ARM Embedded Processors, OpenOCD etc. The Compendium page is a good place to find posts/articles relevant to Eclipse, OpenOCD etc.
 - The websites and documentation links for the various open-source components used in SoftConsole are also useful references (these are listed in the section below).


## Used packages

{{sc}} uses several, mostly free and/or open source, packages. Microchip acknowledges and thanks those organization, communities and individual developers who work on these projects and make them available to others for reuse under the relevant license conditions.




### Eclipse and additional packages

``````{tabs}

````{tab} Java

{% include 'main/introduction/used_packages/_java.inc' %}
````


````{tab} Eclipse/CDT

{% include 'main/introduction/used_packages/_eclipse-cdt.inc' %}
````


````{tab} GNU MCU Eclipse Plugins

{% include 'main/introduction/used_packages/_gme.inc' %}
````


````{tab} OpenOCD

{% include 'main/introduction/used_packages/_openocd.inc' %}
````


``````





### Complementary tools for building projects


``````{tabs}


````{tab} GNU MCU Eclipse Build Tools

{% include 'main/introduction/used_packages/_build-tools.inc' %}
````



````{tab} Python

{% include 'main/introduction/used_packages/_python.inc' %}
````


``````





(multilibs)=
### Toolchains

``````{tabs}

````{tab} GNU RISC-V Embedded GCC Toolchain

{% include 'main/introduction/used_packages/_riscv-toolchain.inc' %}
````

````{tab} GNU Arm Embedded GCC Toolchain

{% if arm is defined %}
{% include 'main/introduction/used_packages/_arm-toolchain.inc' %}
{% else %}
This version of SoftConsole doesn't have support for Arm targets. Feel free to use SoftConsole v2021.2 which has support for both Arm and RISC-V.
{% endif %} 
````

``````




### Emulation and trace

``````{tabs}

````{tab} Antmicro Renode

{% include 'main/introduction/used_packages/_renode.inc' %}
````


````{tab} UltraSoC UltraDevelop

{% include 'main/introduction/used_packages/_ultrasoc.inc' %}
````

``````



### Static code analysis

``````{tabs}

````{tab} Cppcheck

{% include 'main/introduction/used_packages/_cppcheck.inc' %}
````


````{tab} Cppcheclipse

{% include 'main/introduction/used_packages/_cppchecklipse.inc' %}
````

``````







### Deployment

``````{tabs}


````{tab} VMware InstallBuilder

{% include 'main/introduction/used_packages/_install-builder.inc' %}
````


``````

```````
